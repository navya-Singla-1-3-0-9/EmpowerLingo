{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\singl\\\\OneDrive\\\\Desktop\\\\NodeIntro\\\\asl\\\\detect\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport './App.css';\nimport React, { useRef } from 'react';\nimport * as tf from '@tensorflow/tfjs';\nimport * as handpose from '@tensorflow-models/handpose';\nimport Webcam from 'react-webcam';\nimport { drawHand } from \"./utilities\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const webcamRef = useRef(null);\n  const canvasRef = useRef(null);\n\n  const runHandpose = async () => {\n    const net = await handpose.load();\n    setInterval(() => {\n      detect(net);\n    }, 100);\n    console.log('loaded');\n  };\n\n  const detect = async net => {\n    if (typeof webcamRef.current !== \"undefined\" && webcamRef.current !== null && webcamRef.current.video.readyState === 4) {\n      // Get Video Properties\n      const video = webcamRef.current.video;\n      const videoWidth = webcamRef.current.video.videoWidth;\n      const videoHeight = webcamRef.current.video.videoHeight; // Set video width\n\n      webcamRef.current.video.width = videoWidth;\n      webcamRef.current.video.height = videoHeight; // Set canvas height and width\n\n      canvasRef.current.width = videoWidth;\n      canvasRef.current.height = videoHeight; // Make Detections\n\n      const hand = await net.estimateHands(video);\n      console.log(hand); // Draw mesh\n\n      const ctx = canvasRef.current.getContext(\"2d\");\n      drawHand(hand, ctx);\n    }\n  };\n\n  runHandpose();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(Webcam, {\n      ref: webcamRef,\n      style: {\n        position: \"absolute\",\n        marginLeft: \"auto\",\n        marginRight: \"auto\",\n        right: 0,\n        textAlign: \"center\",\n        zIndex: 9,\n        width: 640,\n        height: 480\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvasRef,\n      style: {\n        position: \"absolute\",\n        marginLeft: \"auto\",\n        marginRight: \"auto\",\n        left: 0,\n        right: 0,\n        textAlign: \"center\",\n        zIndex: 9,\n        width: 640,\n        height: 480\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 8\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"AwQWgsmsPhWgADiRou0jnDEtoH4=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/singl/OneDrive/Desktop/NodeIntro/asl/detect/src/App.js"],"names":["React","useRef","tf","handpose","Webcam","drawHand","App","webcamRef","canvasRef","runHandpose","net","load","setInterval","detect","console","log","current","video","readyState","videoWidth","videoHeight","width","height","hand","estimateHands","ctx","getContext","position","marginLeft","marginRight","right","textAlign","zIndex","left"],"mappings":"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","sourcesContent":["import './App.css';\nimport React,{useRef} from 'react';\nimport * as tf from '@tensorflow/tfjs'\nimport * as handpose from '@tensorflow-models/handpose'\nimport Webcam from 'react-webcam'\nimport { drawHand } from \"./utilities\";\n\n\nfunction App() {\n\n  const webcamRef= useRef(null);\n  const canvasRef= useRef(null);\n\n  const runHandpose= async()=>{\n    const net = await handpose.load();\n    setInterval(() => {\n      detect(net);\n    }, 100);\n    console.log('loaded');\n  }\n\n  const detect = async(net)=>{\n    if (\n      typeof webcamRef.current !== \"undefined\" &&\n      webcamRef.current !== null &&\n      webcamRef.current.video.readyState === 4\n    ) {\n      // Get Video Properties\n      const video = webcamRef.current.video;\n      const videoWidth = webcamRef.current.video.videoWidth;\n      const videoHeight = webcamRef.current.video.videoHeight;\n\n      // Set video width\n      webcamRef.current.video.width = videoWidth;\n      webcamRef.current.video.height = videoHeight;\n\n      // Set canvas height and width\n      canvasRef.current.width = videoWidth;\n      canvasRef.current.height = videoHeight;\n\n      // Make Detections\n      const hand = await net.estimateHands(video);\n      console.log(hand);\n\n      // Draw mesh\n      const ctx = canvasRef.current.getContext(\"2d\");\n      drawHand(hand, ctx);\n    }\n  }\n  runHandpose();\n  return (\n\n    <div className=\"App\">\n      <Webcam ref={webcamRef}\n      style={{\n        position:\"absolute\",\n        marginLeft:\"auto\",\n        marginRight:\"auto\",\n       \n        right:0,\n        textAlign:\"center\",\n        zIndex:9,\n        width:640,\n        height: 480\n      }}\n      />\n       <canvas ref={canvasRef}\n      style={{\n        position:\"absolute\",\n        marginLeft:\"auto\",\n        marginRight:\"auto\",\n        left:0,\n        right:0,\n        textAlign:\"center\",\n        zIndex:9,\n        width:640,\n        height: 480\n      }}\n      />\n      \n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}