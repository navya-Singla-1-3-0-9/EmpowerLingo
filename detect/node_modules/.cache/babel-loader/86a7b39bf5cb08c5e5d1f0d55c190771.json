{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\singl\\\\OneDrive\\\\Desktop\\\\NodeIntro\\\\asl__\\\\ASL\\\\detect\\\\src\\\\pages\\\\transcript.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport NavBar from \"../components/navbar\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Transcript = () => {\n  _s();\n\n  const {\n    trans_id\n  } = useParams();\n  const [ttext, setText] = useState(null); // let text=\"\";\n\n  const importAll = r => {\n    let images = {};\n    r.keys().map((item, index) => {\n      images[item.replace('./', '')] = r(item);\n    });\n    return images;\n  };\n\n  const images = importAll(require.context('../components/images/keys', false, /\\.(png|jpe?g|svg)$/));\n  React.useEffect(() => {\n    fetch(`/transcript/${trans_id}`).then(res => res.json()).then(data => {\n      //console.log(text);\n      setText(data.transcript);\n    });\n  }, []);\n  console.log(ttext);\n  const arr = [];\n\n  if (ttext != null) {\n    ttext.toUpperCase().split(\"\").forEach(ch => {\n      arr.push(ch >= 'A' && ch <= 'Z' ? images[`${ch}.jpg`].default : \" \");\n    });\n    console.log(arr);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(NavBar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"TRANSCRIPT\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 11\n    }, this), arr.map(char => {\n      return char != ' ' ? /*#__PURE__*/_jsxDEV(\"img\", {\n        src: char\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 31\n      }, this) : /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 49\n      }, this);\n    })]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 7\n  }, this);\n};\n\n_s(Transcript, \"lhMe0upvYomlwLNvqGlGYnKM3xY=\", false, function () {\n  return [useParams];\n});\n\n_c = Transcript;\nexport default Transcript;\n\nvar _c;\n\n$RefreshReg$(_c, \"Transcript\");","map":{"version":3,"sources":["C:/Users/singl/OneDrive/Desktop/NodeIntro/asl__/ASL/detect/src/pages/transcript.js"],"names":["React","useState","useParams","NavBar","Transcript","trans_id","ttext","setText","importAll","r","images","keys","map","item","index","replace","require","context","useEffect","fetch","then","res","json","data","transcript","console","log","arr","toUpperCase","split","forEach","ch","push","default","char"],"mappings":";;;AAAA,OAAOA,KAAP,IAAcC,QAAd,QAA6B,OAA7B;AACA,SAAQC,SAAR,QAAwB,kBAAxB;AACA,OAAOC,MAAP,MAAmB,sBAAnB;;;AAEA,MAAMC,UAAU,GAAC,MAAI;AAAA;;AACjB,QAAM;AAACC,IAAAA;AAAD,MAAYH,SAAS,EAA3B;AACA,QAAM,CAACI,KAAD,EAAOC,OAAP,IAAiBN,QAAQ,CAAC,IAAD,CAA/B,CAFiB,CAGlB;;AACA,QAAMO,SAAS,GAAEC,CAAD,IAAM;AACrB,QAAIC,MAAM,GAAG,EAAb;AACAD,IAAAA,CAAC,CAACE,IAAF,GAASC,GAAT,CAAa,CAACC,IAAD,EAAOC,KAAP,KAAiB;AAAEJ,MAAAA,MAAM,CAACG,IAAI,CAACE,OAAL,CAAa,IAAb,EAAmB,EAAnB,CAAD,CAAN,GAAiCN,CAAC,CAACI,IAAD,CAAlC;AAA2C,KAA3E;AACA,WAAOH,MAAP;AACD,GAJA;;AAMD,QAAMA,MAAM,GAAGF,SAAS,CAACQ,OAAO,CAACC,OAAR,CAAgB,2BAAhB,EAA6C,KAA7C,EAAoD,oBAApD,CAAD,CAAxB;AACFjB,EAAAA,KAAK,CAACkB,SAAN,CAAgB,MAAM;AAClBC,IAAAA,KAAK,CAAE,eAAcd,QAAS,EAAzB,CAAL,CACGe,IADH,CACSC,GAAD,IAASA,GAAG,CAACC,IAAJ,EADjB,EAEGF,IAFH,CAESG,IAAD,IAAU;AACZ;AACAhB,MAAAA,OAAO,CAACgB,IAAI,CAACC,UAAN,CAAP;AACH,KALH;AAMD,GAPH,EAOK,EAPL;AAQEC,EAAAA,OAAO,CAACC,GAAR,CAAYpB,KAAZ;AACA,QAAMqB,GAAG,GAAC,EAAV;;AAEI,MAAGrB,KAAK,IAAE,IAAV,EAAe;AAClBA,IAAAA,KAAK,CAACsB,WAAN,GAAoBC,KAApB,CAA0B,EAA1B,EAA8BC,OAA9B,CAAsCC,EAAE,IAAE;AACpCJ,MAAAA,GAAG,CAACK,IAAJ,CAASD,EAAE,IAAE,GAAJ,IAAWA,EAAE,IAAE,GAAf,GAAoBrB,MAAM,CAAE,GAAEqB,EAAG,MAAP,CAAN,CAAoBE,OAAxC,GAAkD,GAA3D;AACF,KAFJ;AAGGR,IAAAA,OAAO,CAACC,GAAR,CAAYC,GAAZ;AACD;;AAEH,sBACI;AAAA,4BACI,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFJ,EAIGA,GAAG,CAACf,GAAJ,CAASsB,IAAD,IAAQ;AACb,aAAQA,IAAI,IAAE,GAAN,gBAAU;AAAK,QAAA,GAAG,EAAEA;AAAV;AAAA;AAAA;AAAA;AAAA,cAAV,gBAA4B;AAAA;AAAA;AAAA;AAAA,cAApC;AACH,KAFA,CAJH;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAaD,CA1CD;;GAAM9B,U;UACgBF,S;;;KADhBE,U;AA2CN,eAAeA,UAAf","sourcesContent":["import React,{useState} from \"react\";\r\nimport {useParams} from \"react-router-dom\";\r\nimport NavBar from \"../components/navbar\";\r\n\r\nconst Transcript=()=>{\r\n    const {trans_id}= useParams();\r\n    const [ttext,setText]= useState(null);\r\n   // let text=\"\";\r\n   const importAll=(r)=> {\r\n    let images = {};\r\n    r.keys().map((item, index) => { images[item.replace('./', '')] = r(item); });\r\n    return images;\r\n  }\r\n  \r\n  const images = importAll(require.context('../components/images/keys', false, /\\.(png|jpe?g|svg)$/));\r\nReact.useEffect(() => {\r\n    fetch(`/transcript/${trans_id}`)\r\n      .then((res) => res.json())\r\n      .then((data) => {\r\n          //console.log(text);\r\n          setText(data.transcript);\r\n      });\r\n  }, []);\r\n  console.log(ttext);\r\n  const arr=[]\r\n  \r\n      if(ttext!=null){\r\n   ttext.toUpperCase().split(\"\").forEach(ch=>{\r\n         arr.push(ch>='A' && ch<='Z'?(images[`${ch}.jpg`].default):(\" \"))\r\n      })\r\n      console.log(arr);\r\n    }\r\n \r\n  return (\r\n      <div>\r\n          <NavBar/>\r\n          <h1>TRANSCRIPT</h1>\r\n            \r\n        {arr.map((char)=>{\r\n            return (char!=' '?<img src={char}/>:<br/>)\r\n        })}\r\n                \r\n           \r\n                \r\n      </div>\r\n  )\r\n}\r\nexport default Transcript"]},"metadata":{},"sourceType":"module"}