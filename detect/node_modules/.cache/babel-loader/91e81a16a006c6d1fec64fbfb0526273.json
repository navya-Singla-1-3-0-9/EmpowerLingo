{"ast":null,"code":"import { EmitterRate } from \"./EmitterRate\";\nimport { EmitterLife } from \"./EmitterLife\";\nimport { deepExtend } from \"tsparticles-engine\";\nimport { EmitterSize } from \"./EmitterSize\";\nimport { AnimatableColor } from \"tsparticles-engine/Options/Classes/AnimatableColor\";\nimport { EmitterShapeType } from \"../../Enums\";\nexport class Emitter {\n  constructor() {\n    this.autoPlay = true;\n    this.fill = true;\n    this.life = new EmitterLife();\n    this.rate = new EmitterRate();\n    this.shape = EmitterShapeType.square;\n    this.startCount = 0;\n  }\n\n  load(data) {\n    if (data === undefined) {\n      return;\n    }\n\n    if (data.autoPlay !== undefined) {\n      this.autoPlay = data.autoPlay;\n    }\n\n    if (data.size !== undefined) {\n      if (this.size === undefined) {\n        this.size = new EmitterSize();\n      }\n\n      this.size.load(data.size);\n    }\n\n    if (data.direction !== undefined) {\n      this.direction = data.direction;\n    }\n\n    if (data.fill !== undefined) {\n      this.fill = data.fill;\n    }\n\n    this.life.load(data.life);\n    this.name = data.name;\n\n    if (data.particles !== undefined) {\n      this.particles = deepExtend({}, data.particles);\n    }\n\n    this.rate.load(data.rate);\n\n    if (data.shape !== undefined) {\n      this.shape = data.shape;\n    }\n\n    if (data.position !== undefined) {\n      this.position = {\n        x: data.position.x,\n        y: data.position.y\n      };\n    }\n\n    if (data.spawnColor !== undefined) {\n      if (this.spawnColor === undefined) {\n        this.spawnColor = new AnimatableColor();\n      }\n\n      this.spawnColor.load(data.spawnColor);\n    }\n\n    if (data.startCount !== undefined) {\n      this.startCount = data.startCount;\n    }\n  }\n\n}","map":{"version":3,"sources":["C:/Users/singl/OneDrive/Desktop/NodeIntro/asl__/ASL/detect/node_modules/tsparticles-plugin-emitters/Options/Classes/Emitter.js"],"names":["EmitterRate","EmitterLife","deepExtend","EmitterSize","AnimatableColor","EmitterShapeType","Emitter","constructor","autoPlay","fill","life","rate","shape","square","startCount","load","data","undefined","size","direction","name","particles","position","x","y","spawnColor"],"mappings":"AAAA,SAASA,WAAT,QAA4B,eAA5B;AACA,SAASC,WAAT,QAA4B,eAA5B;AACA,SAASC,UAAT,QAA2B,oBAA3B;AACA,SAASC,WAAT,QAA4B,eAA5B;AACA,SAASC,eAAT,QAAgC,oDAAhC;AACA,SAASC,gBAAT,QAAiC,aAAjC;AACA,OAAO,MAAMC,OAAN,CAAc;AACjBC,EAAAA,WAAW,GAAG;AACV,SAAKC,QAAL,GAAgB,IAAhB;AACA,SAAKC,IAAL,GAAY,IAAZ;AACA,SAAKC,IAAL,GAAY,IAAIT,WAAJ,EAAZ;AACA,SAAKU,IAAL,GAAY,IAAIX,WAAJ,EAAZ;AACA,SAAKY,KAAL,GAAaP,gBAAgB,CAACQ,MAA9B;AACA,SAAKC,UAAL,GAAkB,CAAlB;AACH;;AACDC,EAAAA,IAAI,CAACC,IAAD,EAAO;AACP,QAAIA,IAAI,KAAKC,SAAb,EAAwB;AACpB;AACH;;AACD,QAAID,IAAI,CAACR,QAAL,KAAkBS,SAAtB,EAAiC;AAC7B,WAAKT,QAAL,GAAgBQ,IAAI,CAACR,QAArB;AACH;;AACD,QAAIQ,IAAI,CAACE,IAAL,KAAcD,SAAlB,EAA6B;AACzB,UAAI,KAAKC,IAAL,KAAcD,SAAlB,EAA6B;AACzB,aAAKC,IAAL,GAAY,IAAIf,WAAJ,EAAZ;AACH;;AACD,WAAKe,IAAL,CAAUH,IAAV,CAAeC,IAAI,CAACE,IAApB;AACH;;AACD,QAAIF,IAAI,CAACG,SAAL,KAAmBF,SAAvB,EAAkC;AAC9B,WAAKE,SAAL,GAAiBH,IAAI,CAACG,SAAtB;AACH;;AACD,QAAIH,IAAI,CAACP,IAAL,KAAcQ,SAAlB,EAA6B;AACzB,WAAKR,IAAL,GAAYO,IAAI,CAACP,IAAjB;AACH;;AACD,SAAKC,IAAL,CAAUK,IAAV,CAAeC,IAAI,CAACN,IAApB;AACA,SAAKU,IAAL,GAAYJ,IAAI,CAACI,IAAjB;;AACA,QAAIJ,IAAI,CAACK,SAAL,KAAmBJ,SAAvB,EAAkC;AAC9B,WAAKI,SAAL,GAAiBnB,UAAU,CAAC,EAAD,EAAKc,IAAI,CAACK,SAAV,CAA3B;AACH;;AACD,SAAKV,IAAL,CAAUI,IAAV,CAAeC,IAAI,CAACL,IAApB;;AACA,QAAIK,IAAI,CAACJ,KAAL,KAAeK,SAAnB,EAA8B;AAC1B,WAAKL,KAAL,GAAaI,IAAI,CAACJ,KAAlB;AACH;;AACD,QAAII,IAAI,CAACM,QAAL,KAAkBL,SAAtB,EAAiC;AAC7B,WAAKK,QAAL,GAAgB;AACZC,QAAAA,CAAC,EAAEP,IAAI,CAACM,QAAL,CAAcC,CADL;AAEZC,QAAAA,CAAC,EAAER,IAAI,CAACM,QAAL,CAAcE;AAFL,OAAhB;AAIH;;AACD,QAAIR,IAAI,CAACS,UAAL,KAAoBR,SAAxB,EAAmC;AAC/B,UAAI,KAAKQ,UAAL,KAAoBR,SAAxB,EAAmC;AAC/B,aAAKQ,UAAL,GAAkB,IAAIrB,eAAJ,EAAlB;AACH;;AACD,WAAKqB,UAAL,CAAgBV,IAAhB,CAAqBC,IAAI,CAACS,UAA1B;AACH;;AACD,QAAIT,IAAI,CAACF,UAAL,KAAoBG,SAAxB,EAAmC;AAC/B,WAAKH,UAAL,GAAkBE,IAAI,CAACF,UAAvB;AACH;AACJ;;AApDgB","sourcesContent":["import { EmitterRate } from \"./EmitterRate\";\nimport { EmitterLife } from \"./EmitterLife\";\nimport { deepExtend } from \"tsparticles-engine\";\nimport { EmitterSize } from \"./EmitterSize\";\nimport { AnimatableColor } from \"tsparticles-engine/Options/Classes/AnimatableColor\";\nimport { EmitterShapeType } from \"../../Enums\";\nexport class Emitter {\n    constructor() {\n        this.autoPlay = true;\n        this.fill = true;\n        this.life = new EmitterLife();\n        this.rate = new EmitterRate();\n        this.shape = EmitterShapeType.square;\n        this.startCount = 0;\n    }\n    load(data) {\n        if (data === undefined) {\n            return;\n        }\n        if (data.autoPlay !== undefined) {\n            this.autoPlay = data.autoPlay;\n        }\n        if (data.size !== undefined) {\n            if (this.size === undefined) {\n                this.size = new EmitterSize();\n            }\n            this.size.load(data.size);\n        }\n        if (data.direction !== undefined) {\n            this.direction = data.direction;\n        }\n        if (data.fill !== undefined) {\n            this.fill = data.fill;\n        }\n        this.life.load(data.life);\n        this.name = data.name;\n        if (data.particles !== undefined) {\n            this.particles = deepExtend({}, data.particles);\n        }\n        this.rate.load(data.rate);\n        if (data.shape !== undefined) {\n            this.shape = data.shape;\n        }\n        if (data.position !== undefined) {\n            this.position = {\n                x: data.position.x,\n                y: data.position.y,\n            };\n        }\n        if (data.spawnColor !== undefined) {\n            if (this.spawnColor === undefined) {\n                this.spawnColor = new AnimatableColor();\n            }\n            this.spawnColor.load(data.spawnColor);\n        }\n        if (data.startCount !== undefined) {\n            this.startCount = data.startCount;\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}