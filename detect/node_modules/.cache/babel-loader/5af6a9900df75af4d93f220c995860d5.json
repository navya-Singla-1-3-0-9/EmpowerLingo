{"ast":null,"code":"import { getRangeValue, OutMode, OutModeDirection } from \"tsparticles-engine\";\nexport function bounceHorizontal(data) {\n  if (!(data.outMode === OutMode.bounce || data.outMode === OutMode.bounceHorizontal || data.outMode === \"bounceHorizontal\" || data.outMode === OutMode.split)) {\n    return;\n  }\n\n  const velocity = data.particle.velocity.x;\n  let bounced = false;\n\n  if (data.direction === OutModeDirection.right && data.bounds.right >= data.canvasSize.width && velocity > 0 || data.direction === OutModeDirection.left && data.bounds.left <= 0 && velocity < 0) {\n    const newVelocity = getRangeValue(data.particle.options.bounce.horizontal.value);\n    data.particle.velocity.x *= -newVelocity;\n    bounced = true;\n  }\n\n  if (!bounced) {\n    return;\n  }\n\n  const minPos = data.offset.x + data.size;\n\n  if (data.bounds.right >= data.canvasSize.width) {\n    data.particle.position.x = data.canvasSize.width - minPos;\n  } else if (data.bounds.left <= 0) {\n    data.particle.position.x = minPos;\n  }\n\n  if (data.outMode === OutMode.split) {\n    data.particle.destroy();\n  }\n}\nexport function bounceVertical(data) {\n  if (data.outMode === OutMode.bounce || data.outMode === OutMode.bounceVertical || data.outMode === \"bounceVertical\" || data.outMode === OutMode.split) {\n    const velocity = data.particle.velocity.y;\n    let bounced = false;\n\n    if (data.direction === OutModeDirection.bottom && data.bounds.bottom >= data.canvasSize.height && velocity > 0 || data.direction === OutModeDirection.top && data.bounds.top <= 0 && velocity < 0) {\n      const newVelocity = getRangeValue(data.particle.options.bounce.vertical.value);\n      data.particle.velocity.y *= -newVelocity;\n      bounced = true;\n    }\n\n    if (!bounced) {\n      return;\n    }\n\n    const minPos = data.offset.y + data.size;\n\n    if (data.bounds.bottom >= data.canvasSize.height) {\n      data.particle.position.y = data.canvasSize.height - minPos;\n    } else if (data.bounds.top <= 0) {\n      data.particle.position.y = minPos;\n    }\n\n    if (data.outMode === OutMode.split) {\n      data.particle.destroy();\n    }\n  }\n}","map":{"version":3,"sources":["C:/Users/singl/OneDrive/Desktop/NodeIntro/asl__/ASL/detect/node_modules/tsparticles-updater-out-modes/Utils.js"],"names":["getRangeValue","OutMode","OutModeDirection","bounceHorizontal","data","outMode","bounce","split","velocity","particle","x","bounced","direction","right","bounds","canvasSize","width","left","newVelocity","options","horizontal","value","minPos","offset","size","position","destroy","bounceVertical","y","bottom","height","top","vertical"],"mappings":"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","sourcesContent":["import { getRangeValue, OutMode, OutModeDirection } from \"tsparticles-engine\";\r\nexport function bounceHorizontal(data) {\r\n    if (!(data.outMode === OutMode.bounce ||\r\n        data.outMode === OutMode.bounceHorizontal ||\r\n        data.outMode === \"bounceHorizontal\" ||\r\n        data.outMode === OutMode.split)) {\r\n        return;\r\n    }\r\n    const velocity = data.particle.velocity.x;\r\n    let bounced = false;\r\n    if ((data.direction === OutModeDirection.right && data.bounds.right >= data.canvasSize.width && velocity > 0) ||\r\n        (data.direction === OutModeDirection.left && data.bounds.left <= 0 && velocity < 0)) {\r\n        const newVelocity = getRangeValue(data.particle.options.bounce.horizontal.value);\r\n        data.particle.velocity.x *= -newVelocity;\r\n        bounced = true;\r\n    }\r\n    if (!bounced) {\r\n        return;\r\n    }\r\n    const minPos = data.offset.x + data.size;\r\n    if (data.bounds.right >= data.canvasSize.width) {\r\n        data.particle.position.x = data.canvasSize.width - minPos;\r\n    }\r\n    else if (data.bounds.left <= 0) {\r\n        data.particle.position.x = minPos;\r\n    }\r\n    if (data.outMode === OutMode.split) {\r\n        data.particle.destroy();\r\n    }\r\n}\r\nexport function bounceVertical(data) {\r\n    if (data.outMode === OutMode.bounce ||\r\n        data.outMode === OutMode.bounceVertical ||\r\n        data.outMode === \"bounceVertical\" ||\r\n        data.outMode === OutMode.split) {\r\n        const velocity = data.particle.velocity.y;\r\n        let bounced = false;\r\n        if ((data.direction === OutModeDirection.bottom &&\r\n            data.bounds.bottom >= data.canvasSize.height &&\r\n            velocity > 0) ||\r\n            (data.direction === OutModeDirection.top && data.bounds.top <= 0 && velocity < 0)) {\r\n            const newVelocity = getRangeValue(data.particle.options.bounce.vertical.value);\r\n            data.particle.velocity.y *= -newVelocity;\r\n            bounced = true;\r\n        }\r\n        if (!bounced) {\r\n            return;\r\n        }\r\n        const minPos = data.offset.y + data.size;\r\n        if (data.bounds.bottom >= data.canvasSize.height) {\r\n            data.particle.position.y = data.canvasSize.height - minPos;\r\n        }\r\n        else if (data.bounds.top <= 0) {\r\n            data.particle.position.y = minPos;\r\n        }\r\n        if (data.outMode === OutMode.split) {\r\n            data.particle.destroy();\r\n        }\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}