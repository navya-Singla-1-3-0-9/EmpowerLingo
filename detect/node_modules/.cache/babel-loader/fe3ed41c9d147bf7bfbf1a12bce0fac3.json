{"ast":null,"code":"import { isInArray } from \"tsparticles-engine\";\nimport { Emitters } from \"./Emitters\";\nimport { EmitterClickMode, EmitterShapeType } from \"./Enums\";\nimport { Emitter } from \"./Options/Classes/Emitter\";\nimport { ShapeManager } from \"./ShapeManager\";\nimport { CircleShape } from \"./Shapes/Circle/CircleShape\";\nimport { SquareShape } from \"./Shapes/Square/SquareShape\";\n\nclass EmittersPlugin {\n  constructor() {\n    this.id = \"emitters\";\n  }\n\n  getPlugin(container) {\n    return new Emitters(container);\n  }\n\n  needsPlugin(options) {\n    var _a, _b, _c;\n\n    if (options === undefined) {\n      return false;\n    }\n\n    const emitters = options.emitters;\n    return emitters instanceof Array && !!emitters.length || emitters !== undefined || !!((_c = (_b = (_a = options.interactivity) === null || _a === void 0 ? void 0 : _a.events) === null || _b === void 0 ? void 0 : _b.onClick) === null || _c === void 0 ? void 0 : _c.mode) && isInArray(EmitterClickMode.emitter, options.interactivity.events.onClick.mode);\n  }\n\n  loadOptions(options, source) {\n    var _a, _b;\n\n    if (!this.needsPlugin(options) && !this.needsPlugin(source)) {\n      return;\n    }\n\n    const optionsCast = options;\n\n    if (source === null || source === void 0 ? void 0 : source.emitters) {\n      if ((source === null || source === void 0 ? void 0 : source.emitters) instanceof Array) {\n        optionsCast.emitters = source === null || source === void 0 ? void 0 : source.emitters.map(s => {\n          const tmp = new Emitter();\n          tmp.load(s);\n          return tmp;\n        });\n      } else {\n        let emitterOptions = optionsCast.emitters;\n\n        if ((emitterOptions === null || emitterOptions === void 0 ? void 0 : emitterOptions.load) === undefined) {\n          optionsCast.emitters = emitterOptions = new Emitter();\n        }\n\n        emitterOptions.load(source === null || source === void 0 ? void 0 : source.emitters);\n      }\n    }\n\n    const interactivityEmitters = (_b = (_a = source === null || source === void 0 ? void 0 : source.interactivity) === null || _a === void 0 ? void 0 : _a.modes) === null || _b === void 0 ? void 0 : _b.emitters;\n\n    if (interactivityEmitters) {\n      if (interactivityEmitters instanceof Array) {\n        optionsCast.interactivity.modes.emitters = interactivityEmitters.map(s => {\n          const tmp = new Emitter();\n          tmp.load(s);\n          return tmp;\n        });\n      } else {\n        let emitterOptions = optionsCast.interactivity.modes.emitters;\n\n        if ((emitterOptions === null || emitterOptions === void 0 ? void 0 : emitterOptions.load) === undefined) {\n          optionsCast.interactivity.modes.emitters = emitterOptions = new Emitter();\n        }\n\n        emitterOptions.load(interactivityEmitters);\n      }\n    }\n  }\n\n}\n\nexport function loadEmittersPlugin(tsParticles) {\n  const plugin = new EmittersPlugin();\n  tsParticles.addPlugin(plugin);\n\n  if (!tsParticles.addEmitterShape) {\n    tsParticles.addEmitterShape = (name, shape) => {\n      ShapeManager.addShape(name, shape);\n    };\n  }\n\n  tsParticles.addEmitterShape(EmitterShapeType.circle, new CircleShape());\n  tsParticles.addEmitterShape(EmitterShapeType.square, new SquareShape());\n}\nexport * from \"./EmittersMain\";","map":{"version":3,"sources":["C:/Users/singl/OneDrive/Desktop/NodeIntro/asl__/ASL/detect/node_modules/tsparticles-plugin-emitters/index.js"],"names":["isInArray","Emitters","EmitterClickMode","EmitterShapeType","Emitter","ShapeManager","CircleShape","SquareShape","EmittersPlugin","constructor","id","getPlugin","container","needsPlugin","options","_a","_b","_c","undefined","emitters","Array","length","interactivity","events","onClick","mode","emitter","loadOptions","source","optionsCast","map","s","tmp","load","emitterOptions","interactivityEmitters","modes","loadEmittersPlugin","tsParticles","plugin","addPlugin","addEmitterShape","name","shape","addShape","circle","square"],"mappings":"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","sourcesContent":["import { isInArray } from \"tsparticles-engine\";\nimport { Emitters } from \"./Emitters\";\nimport { EmitterClickMode, EmitterShapeType } from \"./Enums\";\nimport { Emitter } from \"./Options/Classes/Emitter\";\nimport { ShapeManager } from \"./ShapeManager\";\nimport { CircleShape } from \"./Shapes/Circle/CircleShape\";\nimport { SquareShape } from \"./Shapes/Square/SquareShape\";\nclass EmittersPlugin {\n    constructor() {\n        this.id = \"emitters\";\n    }\n    getPlugin(container) {\n        return new Emitters(container);\n    }\n    needsPlugin(options) {\n        var _a, _b, _c;\n        if (options === undefined) {\n            return false;\n        }\n        const emitters = options.emitters;\n        return ((emitters instanceof Array && !!emitters.length) ||\n            emitters !== undefined ||\n            (!!((_c = (_b = (_a = options.interactivity) === null || _a === void 0 ? void 0 : _a.events) === null || _b === void 0 ? void 0 : _b.onClick) === null || _c === void 0 ? void 0 : _c.mode) &&\n                isInArray(EmitterClickMode.emitter, options.interactivity.events.onClick.mode)));\n    }\n    loadOptions(options, source) {\n        var _a, _b;\n        if (!this.needsPlugin(options) && !this.needsPlugin(source)) {\n            return;\n        }\n        const optionsCast = options;\n        if (source === null || source === void 0 ? void 0 : source.emitters) {\n            if ((source === null || source === void 0 ? void 0 : source.emitters) instanceof Array) {\n                optionsCast.emitters = source === null || source === void 0 ? void 0 : source.emitters.map((s) => {\n                    const tmp = new Emitter();\n                    tmp.load(s);\n                    return tmp;\n                });\n            }\n            else {\n                let emitterOptions = optionsCast.emitters;\n                if ((emitterOptions === null || emitterOptions === void 0 ? void 0 : emitterOptions.load) === undefined) {\n                    optionsCast.emitters = emitterOptions = new Emitter();\n                }\n                emitterOptions.load(source === null || source === void 0 ? void 0 : source.emitters);\n            }\n        }\n        const interactivityEmitters = (_b = (_a = source === null || source === void 0 ? void 0 : source.interactivity) === null || _a === void 0 ? void 0 : _a.modes) === null || _b === void 0 ? void 0 : _b.emitters;\n        if (interactivityEmitters) {\n            if (interactivityEmitters instanceof Array) {\n                optionsCast.interactivity.modes.emitters = interactivityEmitters.map((s) => {\n                    const tmp = new Emitter();\n                    tmp.load(s);\n                    return tmp;\n                });\n            }\n            else {\n                let emitterOptions = optionsCast.interactivity.modes.emitters;\n                if ((emitterOptions === null || emitterOptions === void 0 ? void 0 : emitterOptions.load) === undefined) {\n                    optionsCast.interactivity.modes.emitters = emitterOptions = new Emitter();\n                }\n                emitterOptions.load(interactivityEmitters);\n            }\n        }\n    }\n}\nexport function loadEmittersPlugin(tsParticles) {\n    const plugin = new EmittersPlugin();\n    tsParticles.addPlugin(plugin);\n    if (!tsParticles.addEmitterShape) {\n        tsParticles.addEmitterShape = (name, shape) => {\n            ShapeManager.addShape(name, shape);\n        };\n    }\n    tsParticles.addEmitterShape(EmitterShapeType.circle, new CircleShape());\n    tsParticles.addEmitterShape(EmitterShapeType.square, new SquareShape());\n}\nexport * from \"./EmittersMain\";\n"]},"metadata":{},"sourceType":"module"}