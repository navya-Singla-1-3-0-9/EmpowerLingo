{"ast":null,"code":"import { EmitterInstance } from \"./EmitterInstance\";\nimport { Emitter } from \"./Options/Classes/Emitter\";\nimport { EmitterClickMode } from \"./Enums\";\nimport { deepExtend, itemFromArray } from \"tsparticles-engine\";\nexport class Emitters {\n  constructor(container) {\n    this.container = container;\n    this.array = [];\n    this.emitters = [];\n    this.interactivityEmitters = [];\n    const overridableContainer = container;\n\n    overridableContainer.getEmitter = idxOrName => idxOrName === undefined || typeof idxOrName === \"number\" ? this.array[idxOrName || 0] : this.array.find(t => t.name === idxOrName);\n\n    overridableContainer.addEmitter = (options, position) => this.addEmitter(options, position);\n\n    overridableContainer.playEmitter = idxOrName => {\n      const emitter = overridableContainer.getEmitter(idxOrName);\n\n      if (emitter) {\n        emitter.externalPlay();\n      }\n    };\n\n    overridableContainer.pauseEmitter = idxOrName => {\n      const emitter = overridableContainer.getEmitter(idxOrName);\n\n      if (emitter) {\n        emitter.externalPause();\n      }\n    };\n  }\n\n  init(options) {\n    var _a, _b;\n\n    if (!options) {\n      return;\n    }\n\n    if (options.emitters) {\n      if (options.emitters instanceof Array) {\n        this.emitters = options.emitters.map(s => {\n          const tmp = new Emitter();\n          tmp.load(s);\n          return tmp;\n        });\n      } else {\n        if (this.emitters instanceof Array) {\n          this.emitters = new Emitter();\n        }\n\n        this.emitters.load(options.emitters);\n      }\n    }\n\n    const interactivityEmitters = (_b = (_a = options.interactivity) === null || _a === void 0 ? void 0 : _a.modes) === null || _b === void 0 ? void 0 : _b.emitters;\n\n    if (interactivityEmitters) {\n      if (interactivityEmitters instanceof Array) {\n        this.interactivityEmitters = interactivityEmitters.map(s => {\n          const tmp = new Emitter();\n          tmp.load(s);\n          return tmp;\n        });\n      } else {\n        if (this.interactivityEmitters instanceof Array) {\n          this.interactivityEmitters = new Emitter();\n        }\n\n        this.interactivityEmitters.load(interactivityEmitters);\n      }\n    }\n\n    if (this.emitters instanceof Array) {\n      for (const emitterOptions of this.emitters) {\n        this.addEmitter(emitterOptions);\n      }\n    } else {\n      this.addEmitter(this.emitters);\n    }\n  }\n\n  play() {\n    for (const emitter of this.array) {\n      emitter.play();\n    }\n  }\n\n  pause() {\n    for (const emitter of this.array) {\n      emitter.pause();\n    }\n  }\n\n  stop() {\n    this.array = [];\n  }\n\n  update(delta) {\n    for (const emitter of this.array) {\n      emitter.update(delta);\n    }\n  }\n\n  handleClickMode(mode) {\n    const container = this.container;\n    const emitterOptions = this.emitters;\n    const modeEmitters = this.interactivityEmitters;\n\n    if (mode === EmitterClickMode.emitter) {\n      let emitterModeOptions;\n\n      if (modeEmitters instanceof Array) {\n        if (modeEmitters.length > 0) {\n          emitterModeOptions = itemFromArray(modeEmitters);\n        }\n      } else {\n        emitterModeOptions = modeEmitters;\n      }\n\n      const emittersOptions = emitterModeOptions !== null && emitterModeOptions !== void 0 ? emitterModeOptions : emitterOptions instanceof Array ? itemFromArray(emitterOptions) : emitterOptions;\n      const ePosition = container.interactivity.mouse.clickPosition;\n      this.addEmitter(deepExtend({}, emittersOptions), ePosition);\n    }\n  }\n\n  resize() {\n    for (const emitter of this.array) {\n      emitter.resize();\n    }\n  }\n\n  addEmitter(options, position) {\n    const emitter = new EmitterInstance(this, this.container, options, position);\n    this.array.push(emitter);\n    return emitter;\n  }\n\n  removeEmitter(emitter) {\n    const index = this.array.indexOf(emitter);\n\n    if (index >= 0) {\n      this.array.splice(index, 1);\n    }\n  }\n\n}","map":{"version":3,"sources":["C:/Users/singl/OneDrive/Desktop/NodeIntro/asl__/ASL/detect/node_modules/tsparticles-plugin-emitters/Emitters.js"],"names":["EmitterInstance","Emitter","EmitterClickMode","deepExtend","itemFromArray","Emitters","constructor","container","array","emitters","interactivityEmitters","overridableContainer","getEmitter","idxOrName","undefined","find","t","name","addEmitter","options","position","playEmitter","emitter","externalPlay","pauseEmitter","externalPause","init","_a","_b","Array","map","s","tmp","load","interactivity","modes","emitterOptions","play","pause","stop","update","delta","handleClickMode","mode","modeEmitters","emitterModeOptions","length","emittersOptions","ePosition","mouse","clickPosition","resize","push","removeEmitter","index","indexOf","splice"],"mappings":"AAAA,SAASA,eAAT,QAAgC,mBAAhC;AACA,SAASC,OAAT,QAAwB,2BAAxB;AACA,SAASC,gBAAT,QAAiC,SAAjC;AACA,SAASC,UAAT,EAAqBC,aAArB,QAA0C,oBAA1C;AACA,OAAO,MAAMC,QAAN,CAAe;AAClBC,EAAAA,WAAW,CAACC,SAAD,EAAY;AACnB,SAAKA,SAAL,GAAiBA,SAAjB;AACA,SAAKC,KAAL,GAAa,EAAb;AACA,SAAKC,QAAL,GAAgB,EAAhB;AACA,SAAKC,qBAAL,GAA6B,EAA7B;AACA,UAAMC,oBAAoB,GAAGJ,SAA7B;;AACAI,IAAAA,oBAAoB,CAACC,UAArB,GAAmCC,SAAD,IAAeA,SAAS,KAAKC,SAAd,IAA2B,OAAOD,SAAP,KAAqB,QAAhD,GAC3C,KAAKL,KAAL,CAAWK,SAAS,IAAI,CAAxB,CAD2C,GAE3C,KAAKL,KAAL,CAAWO,IAAX,CAAiBC,CAAD,IAAOA,CAAC,CAACC,IAAF,KAAWJ,SAAlC,CAFN;;AAGAF,IAAAA,oBAAoB,CAACO,UAArB,GAAkC,CAACC,OAAD,EAAUC,QAAV,KAAuB,KAAKF,UAAL,CAAgBC,OAAhB,EAAyBC,QAAzB,CAAzD;;AACAT,IAAAA,oBAAoB,CAACU,WAArB,GAAoCR,SAAD,IAAe;AAC9C,YAAMS,OAAO,GAAGX,oBAAoB,CAACC,UAArB,CAAgCC,SAAhC,CAAhB;;AACA,UAAIS,OAAJ,EAAa;AACTA,QAAAA,OAAO,CAACC,YAAR;AACH;AACJ,KALD;;AAMAZ,IAAAA,oBAAoB,CAACa,YAArB,GAAqCX,SAAD,IAAe;AAC/C,YAAMS,OAAO,GAAGX,oBAAoB,CAACC,UAArB,CAAgCC,SAAhC,CAAhB;;AACA,UAAIS,OAAJ,EAAa;AACTA,QAAAA,OAAO,CAACG,aAAR;AACH;AACJ,KALD;AAMH;;AACDC,EAAAA,IAAI,CAACP,OAAD,EAAU;AACV,QAAIQ,EAAJ,EAAQC,EAAR;;AACA,QAAI,CAACT,OAAL,EAAc;AACV;AACH;;AACD,QAAIA,OAAO,CAACV,QAAZ,EAAsB;AAClB,UAAIU,OAAO,CAACV,QAAR,YAA4BoB,KAAhC,EAAuC;AACnC,aAAKpB,QAAL,GAAgBU,OAAO,CAACV,QAAR,CAAiBqB,GAAjB,CAAsBC,CAAD,IAAO;AACxC,gBAAMC,GAAG,GAAG,IAAI/B,OAAJ,EAAZ;AACA+B,UAAAA,GAAG,CAACC,IAAJ,CAASF,CAAT;AACA,iBAAOC,GAAP;AACH,SAJe,CAAhB;AAKH,OAND,MAOK;AACD,YAAI,KAAKvB,QAAL,YAAyBoB,KAA7B,EAAoC;AAChC,eAAKpB,QAAL,GAAgB,IAAIR,OAAJ,EAAhB;AACH;;AACD,aAAKQ,QAAL,CAAcwB,IAAd,CAAmBd,OAAO,CAACV,QAA3B;AACH;AACJ;;AACD,UAAMC,qBAAqB,GAAG,CAACkB,EAAE,GAAG,CAACD,EAAE,GAAGR,OAAO,CAACe,aAAd,MAAiC,IAAjC,IAAyCP,EAAE,KAAK,KAAK,CAArD,GAAyD,KAAK,CAA9D,GAAkEA,EAAE,CAACQ,KAA3E,MAAsF,IAAtF,IAA8FP,EAAE,KAAK,KAAK,CAA1G,GAA8G,KAAK,CAAnH,GAAuHA,EAAE,CAACnB,QAAxJ;;AACA,QAAIC,qBAAJ,EAA2B;AACvB,UAAIA,qBAAqB,YAAYmB,KAArC,EAA4C;AACxC,aAAKnB,qBAAL,GAA6BA,qBAAqB,CAACoB,GAAtB,CAA2BC,CAAD,IAAO;AAC1D,gBAAMC,GAAG,GAAG,IAAI/B,OAAJ,EAAZ;AACA+B,UAAAA,GAAG,CAACC,IAAJ,CAASF,CAAT;AACA,iBAAOC,GAAP;AACH,SAJ4B,CAA7B;AAKH,OAND,MAOK;AACD,YAAI,KAAKtB,qBAAL,YAAsCmB,KAA1C,EAAiD;AAC7C,eAAKnB,qBAAL,GAA6B,IAAIT,OAAJ,EAA7B;AACH;;AACD,aAAKS,qBAAL,CAA2BuB,IAA3B,CAAgCvB,qBAAhC;AACH;AACJ;;AACD,QAAI,KAAKD,QAAL,YAAyBoB,KAA7B,EAAoC;AAChC,WAAK,MAAMO,cAAX,IAA6B,KAAK3B,QAAlC,EAA4C;AACxC,aAAKS,UAAL,CAAgBkB,cAAhB;AACH;AACJ,KAJD,MAKK;AACD,WAAKlB,UAAL,CAAgB,KAAKT,QAArB;AACH;AACJ;;AACD4B,EAAAA,IAAI,GAAG;AACH,SAAK,MAAMf,OAAX,IAAsB,KAAKd,KAA3B,EAAkC;AAC9Bc,MAAAA,OAAO,CAACe,IAAR;AACH;AACJ;;AACDC,EAAAA,KAAK,GAAG;AACJ,SAAK,MAAMhB,OAAX,IAAsB,KAAKd,KAA3B,EAAkC;AAC9Bc,MAAAA,OAAO,CAACgB,KAAR;AACH;AACJ;;AACDC,EAAAA,IAAI,GAAG;AACH,SAAK/B,KAAL,GAAa,EAAb;AACH;;AACDgC,EAAAA,MAAM,CAACC,KAAD,EAAQ;AACV,SAAK,MAAMnB,OAAX,IAAsB,KAAKd,KAA3B,EAAkC;AAC9Bc,MAAAA,OAAO,CAACkB,MAAR,CAAeC,KAAf;AACH;AACJ;;AACDC,EAAAA,eAAe,CAACC,IAAD,EAAO;AAClB,UAAMpC,SAAS,GAAG,KAAKA,SAAvB;AACA,UAAM6B,cAAc,GAAG,KAAK3B,QAA5B;AACA,UAAMmC,YAAY,GAAG,KAAKlC,qBAA1B;;AACA,QAAIiC,IAAI,KAAKzC,gBAAgB,CAACoB,OAA9B,EAAuC;AACnC,UAAIuB,kBAAJ;;AACA,UAAID,YAAY,YAAYf,KAA5B,EAAmC;AAC/B,YAAIe,YAAY,CAACE,MAAb,GAAsB,CAA1B,EAA6B;AACzBD,UAAAA,kBAAkB,GAAGzC,aAAa,CAACwC,YAAD,CAAlC;AACH;AACJ,OAJD,MAKK;AACDC,QAAAA,kBAAkB,GAAGD,YAArB;AACH;;AACD,YAAMG,eAAe,GAAGF,kBAAkB,KAAK,IAAvB,IAA+BA,kBAAkB,KAAK,KAAK,CAA3D,GAA+DA,kBAA/D,GAAqFT,cAAc,YAAYP,KAA1B,GAAkCzB,aAAa,CAACgC,cAAD,CAA/C,GAAkEA,cAA/K;AACA,YAAMY,SAAS,GAAGzC,SAAS,CAAC2B,aAAV,CAAwBe,KAAxB,CAA8BC,aAAhD;AACA,WAAKhC,UAAL,CAAgBf,UAAU,CAAC,EAAD,EAAK4C,eAAL,CAA1B,EAAiDC,SAAjD;AACH;AACJ;;AACDG,EAAAA,MAAM,GAAG;AACL,SAAK,MAAM7B,OAAX,IAAsB,KAAKd,KAA3B,EAAkC;AAC9Bc,MAAAA,OAAO,CAAC6B,MAAR;AACH;AACJ;;AACDjC,EAAAA,UAAU,CAACC,OAAD,EAAUC,QAAV,EAAoB;AAC1B,UAAME,OAAO,GAAG,IAAItB,eAAJ,CAAoB,IAApB,EAA0B,KAAKO,SAA/B,EAA0CY,OAA1C,EAAmDC,QAAnD,CAAhB;AACA,SAAKZ,KAAL,CAAW4C,IAAX,CAAgB9B,OAAhB;AACA,WAAOA,OAAP;AACH;;AACD+B,EAAAA,aAAa,CAAC/B,OAAD,EAAU;AACnB,UAAMgC,KAAK,GAAG,KAAK9C,KAAL,CAAW+C,OAAX,CAAmBjC,OAAnB,CAAd;;AACA,QAAIgC,KAAK,IAAI,CAAb,EAAgB;AACZ,WAAK9C,KAAL,CAAWgD,MAAX,CAAkBF,KAAlB,EAAyB,CAAzB;AACH;AACJ;;AAzHiB","sourcesContent":["import { EmitterInstance } from \"./EmitterInstance\";\nimport { Emitter } from \"./Options/Classes/Emitter\";\nimport { EmitterClickMode } from \"./Enums\";\nimport { deepExtend, itemFromArray } from \"tsparticles-engine\";\nexport class Emitters {\n    constructor(container) {\n        this.container = container;\n        this.array = [];\n        this.emitters = [];\n        this.interactivityEmitters = [];\n        const overridableContainer = container;\n        overridableContainer.getEmitter = (idxOrName) => idxOrName === undefined || typeof idxOrName === \"number\"\n            ? this.array[idxOrName || 0]\n            : this.array.find((t) => t.name === idxOrName);\n        overridableContainer.addEmitter = (options, position) => this.addEmitter(options, position);\n        overridableContainer.playEmitter = (idxOrName) => {\n            const emitter = overridableContainer.getEmitter(idxOrName);\n            if (emitter) {\n                emitter.externalPlay();\n            }\n        };\n        overridableContainer.pauseEmitter = (idxOrName) => {\n            const emitter = overridableContainer.getEmitter(idxOrName);\n            if (emitter) {\n                emitter.externalPause();\n            }\n        };\n    }\n    init(options) {\n        var _a, _b;\n        if (!options) {\n            return;\n        }\n        if (options.emitters) {\n            if (options.emitters instanceof Array) {\n                this.emitters = options.emitters.map((s) => {\n                    const tmp = new Emitter();\n                    tmp.load(s);\n                    return tmp;\n                });\n            }\n            else {\n                if (this.emitters instanceof Array) {\n                    this.emitters = new Emitter();\n                }\n                this.emitters.load(options.emitters);\n            }\n        }\n        const interactivityEmitters = (_b = (_a = options.interactivity) === null || _a === void 0 ? void 0 : _a.modes) === null || _b === void 0 ? void 0 : _b.emitters;\n        if (interactivityEmitters) {\n            if (interactivityEmitters instanceof Array) {\n                this.interactivityEmitters = interactivityEmitters.map((s) => {\n                    const tmp = new Emitter();\n                    tmp.load(s);\n                    return tmp;\n                });\n            }\n            else {\n                if (this.interactivityEmitters instanceof Array) {\n                    this.interactivityEmitters = new Emitter();\n                }\n                this.interactivityEmitters.load(interactivityEmitters);\n            }\n        }\n        if (this.emitters instanceof Array) {\n            for (const emitterOptions of this.emitters) {\n                this.addEmitter(emitterOptions);\n            }\n        }\n        else {\n            this.addEmitter(this.emitters);\n        }\n    }\n    play() {\n        for (const emitter of this.array) {\n            emitter.play();\n        }\n    }\n    pause() {\n        for (const emitter of this.array) {\n            emitter.pause();\n        }\n    }\n    stop() {\n        this.array = [];\n    }\n    update(delta) {\n        for (const emitter of this.array) {\n            emitter.update(delta);\n        }\n    }\n    handleClickMode(mode) {\n        const container = this.container;\n        const emitterOptions = this.emitters;\n        const modeEmitters = this.interactivityEmitters;\n        if (mode === EmitterClickMode.emitter) {\n            let emitterModeOptions;\n            if (modeEmitters instanceof Array) {\n                if (modeEmitters.length > 0) {\n                    emitterModeOptions = itemFromArray(modeEmitters);\n                }\n            }\n            else {\n                emitterModeOptions = modeEmitters;\n            }\n            const emittersOptions = emitterModeOptions !== null && emitterModeOptions !== void 0 ? emitterModeOptions : (emitterOptions instanceof Array ? itemFromArray(emitterOptions) : emitterOptions);\n            const ePosition = container.interactivity.mouse.clickPosition;\n            this.addEmitter(deepExtend({}, emittersOptions), ePosition);\n        }\n    }\n    resize() {\n        for (const emitter of this.array) {\n            emitter.resize();\n        }\n    }\n    addEmitter(options, position) {\n        const emitter = new EmitterInstance(this, this.container, options, position);\n        this.array.push(emitter);\n        return emitter;\n    }\n    removeEmitter(emitter) {\n        const index = this.array.indexOf(emitter);\n        if (index >= 0) {\n            this.array.splice(index, 1);\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}