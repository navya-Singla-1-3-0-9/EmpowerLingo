{"ast":null,"code":"const fingerJoints = {\n  thumb: [0, 1, 2, 3, 4],\n  indexFinger: [0, 5, 6, 7, 8],\n  middleFinger: [0, 9, 10, 11, 12],\n  ringFinger: [0, 13, 14, 15, 16],\n  pinky: [0, 17, 18, 19, 20]\n}; // Infinity Gauntlet Style\n\nconst style = {\n  0: {\n    color: \"yellow\",\n    size: 15\n  },\n  1: {\n    color: \"gold\",\n    size: 6\n  },\n  2: {\n    color: \"green\",\n    size: 10\n  },\n  3: {\n    color: \"gold\",\n    size: 6\n  },\n  4: {\n    color: \"gold\",\n    size: 6\n  },\n  5: {\n    color: \"purple\",\n    size: 10\n  },\n  6: {\n    color: \"gold\",\n    size: 6\n  },\n  7: {\n    color: \"gold\",\n    size: 6\n  },\n  8: {\n    color: \"gold\",\n    size: 6\n  },\n  9: {\n    color: \"blue\",\n    size: 10\n  },\n  10: {\n    color: \"gold\",\n    size: 6\n  },\n  11: {\n    color: \"gold\",\n    size: 6\n  },\n  12: {\n    color: \"gold\",\n    size: 6\n  },\n  13: {\n    color: \"red\",\n    size: 10\n  },\n  14: {\n    color: \"gold\",\n    size: 6\n  },\n  15: {\n    color: \"gold\",\n    size: 6\n  },\n  16: {\n    color: \"gold\",\n    size: 6\n  },\n  17: {\n    color: \"orange\",\n    size: 10\n  },\n  18: {\n    color: \"gold\",\n    size: 6\n  },\n  19: {\n    color: \"gold\",\n    size: 6\n  },\n  20: {\n    color: \"gold\",\n    size: 6\n  }\n}; // Drawing function\n\nexport const drawHand = (predictions, ctx) => {\n  // Check if we have predictions\n  if (predictions.length > 0) {\n    // Loop through each prediction\n    predictions.forEach(prediction => {\n      // Grab landmarks\n      const landmarks = prediction.landmarks; // Loop through fingers\n\n      for (let j = 0; j < Object.keys(fingerJoints).length; j++) {\n        let finger = Object.keys(fingerJoints)[j]; //  Loop through pairs of joints\n\n        for (let k = 0; k < fingerJoints[finger].length - 1; k++) {\n          // Get pairs of joints\n          const firstJointIndex = fingerJoints[finger][k];\n          const secondJointIndex = fingerJoints[finger][k + 1]; // Draw path\n\n          ctx.beginPath();\n          ctx.moveTo(landmarks[firstJointIndex][0], landmarks[firstJointIndex][1]);\n          ctx.lineTo(landmarks[secondJointIndex][0], landmarks[secondJointIndex][1]);\n          ctx.strokeStyle = \"plum\";\n          ctx.lineWidth = 4;\n          ctx.stroke();\n        }\n      } // Loop through landmarks and draw em\n\n\n      for (let i = 0; i < landmarks.length; i++) {\n        // Get x point\n        const x = landmarks[i][0]; // Get y point\n\n        const y = landmarks[i][1]; // Start drawing\n\n        ctx.beginPath();\n        ctx.arc(x, y, style[i][\"size\"], 0, 3 * Math.PI); // Set line color\n\n        ctx.fillStyle = style[i][\"color\"];\n        ctx.fill();\n      }\n    });\n  }\n};","map":{"version":3,"sources":["C:/Users/singl/OneDrive/Desktop/NodeIntro/ASL/detect/src/utilities.js"],"names":["fingerJoints","thumb","indexFinger","middleFinger","ringFinger","pinky","style","color","size","drawHand","predictions","ctx","length","forEach","prediction","landmarks","j","Object","keys","finger","k","firstJointIndex","secondJointIndex","beginPath","moveTo","lineTo","strokeStyle","lineWidth","stroke","i","x","y","arc","Math","PI","fillStyle","fill"],"mappings":"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","sourcesContent":["const fingerJoints = {\r\n    thumb: [0, 1, 2, 3, 4],\r\n    indexFinger: [0, 5, 6, 7, 8],\r\n    middleFinger: [0, 9, 10, 11, 12],\r\n    ringFinger: [0, 13, 14, 15, 16],\r\n    pinky: [0, 17, 18, 19, 20],\r\n  };\r\n  \r\n  // Infinity Gauntlet Style\r\n  const style = {\r\n    0: { color: \"yellow\", size: 15 },\r\n    1: { color: \"gold\", size: 6 },\r\n    2: { color: \"green\", size: 10 },\r\n    3: { color: \"gold\", size: 6 },\r\n    4: { color: \"gold\", size: 6 },\r\n    5: { color: \"purple\", size: 10 },\r\n    6: { color: \"gold\", size: 6 },\r\n    7: { color: \"gold\", size: 6 },\r\n    8: { color: \"gold\", size: 6 },\r\n    9: { color: \"blue\", size: 10 },\r\n    10: { color: \"gold\", size: 6 },\r\n    11: { color: \"gold\", size: 6 },\r\n    12: { color: \"gold\", size: 6 },\r\n    13: { color: \"red\", size: 10 },\r\n    14: { color: \"gold\", size: 6 },\r\n    15: { color: \"gold\", size: 6 },\r\n    16: { color: \"gold\", size: 6 },\r\n    17: { color: \"orange\", size: 10 },\r\n    18: { color: \"gold\", size: 6 },\r\n    19: { color: \"gold\", size: 6 },\r\n    20: { color: \"gold\", size: 6 },\r\n  };\r\n  \r\n  // Drawing function\r\n  export const drawHand = (predictions, ctx) => {\r\n    // Check if we have predictions\r\n    if (predictions.length > 0) {\r\n      // Loop through each prediction\r\n      predictions.forEach((prediction) => {\r\n        // Grab landmarks\r\n        const landmarks = prediction.landmarks;\r\n  \r\n        // Loop through fingers\r\n        for (let j = 0; j < Object.keys(fingerJoints).length; j++) {\r\n          let finger = Object.keys(fingerJoints)[j];\r\n          //  Loop through pairs of joints\r\n          for (let k = 0; k < fingerJoints[finger].length - 1; k++) {\r\n            // Get pairs of joints\r\n            const firstJointIndex = fingerJoints[finger][k];\r\n            const secondJointIndex = fingerJoints[finger][k + 1];\r\n  \r\n            // Draw path\r\n            ctx.beginPath();\r\n            ctx.moveTo(\r\n              landmarks[firstJointIndex][0],\r\n              landmarks[firstJointIndex][1]\r\n            );\r\n            ctx.lineTo(\r\n              landmarks[secondJointIndex][0],\r\n              landmarks[secondJointIndex][1]\r\n            );\r\n            ctx.strokeStyle = \"plum\";\r\n            ctx.lineWidth = 4;\r\n            ctx.stroke();\r\n          }\r\n        }\r\n  \r\n        // Loop through landmarks and draw em\r\n        for (let i = 0; i < landmarks.length; i++) {\r\n          // Get x point\r\n          const x = landmarks[i][0];\r\n          // Get y point\r\n          const y = landmarks[i][1];\r\n          // Start drawing\r\n          ctx.beginPath();\r\n          ctx.arc(x, y, style[i][\"size\"], 0, 3 * Math.PI);\r\n  \r\n          // Set line color\r\n          ctx.fillStyle = style[i][\"color\"];\r\n          ctx.fill();\r\n        }\r\n      });\r\n    }\r\n  };"]},"metadata":{},"sourceType":"module"}