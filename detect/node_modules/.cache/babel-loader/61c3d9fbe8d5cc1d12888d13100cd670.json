{"ast":null,"code":"import { AnimationStatus, DestroyType, StartValueType, clamp, getRangeMax, getRangeMin, getRangeValue, randomInRange } from \"tsparticles-engine\";\n\nfunction checkDestroy(particle, value, minValue, maxValue) {\n  switch (particle.options.opacity.animation.destroy) {\n    case DestroyType.max:\n      if (value >= maxValue) {\n        particle.destroy();\n      }\n\n      break;\n\n    case DestroyType.min:\n      if (value <= minValue) {\n        particle.destroy();\n      }\n\n      break;\n  }\n}\n\nfunction updateOpacity(particle, delta) {\n  var _a, _b, _c, _d, _e;\n\n  if (!particle.opacity) {\n    return;\n  }\n\n  const minValue = particle.opacity.min;\n  const maxValue = particle.opacity.max;\n\n  if (!(!particle.destroyed && particle.opacity.enable && (((_a = particle.opacity.maxLoops) !== null && _a !== void 0 ? _a : 0) <= 0 || ((_b = particle.opacity.loops) !== null && _b !== void 0 ? _b : 0) < ((_c = particle.opacity.maxLoops) !== null && _c !== void 0 ? _c : 0)))) {\n    return;\n  }\n\n  switch (particle.opacity.status) {\n    case AnimationStatus.increasing:\n      if (particle.opacity.value >= maxValue) {\n        particle.opacity.status = AnimationStatus.decreasing;\n\n        if (!particle.opacity.loops) {\n          particle.opacity.loops = 0;\n        }\n\n        particle.opacity.loops++;\n      } else {\n        particle.opacity.value += ((_d = particle.opacity.velocity) !== null && _d !== void 0 ? _d : 0) * delta.factor;\n      }\n\n      break;\n\n    case AnimationStatus.decreasing:\n      if (particle.opacity.value <= minValue) {\n        particle.opacity.status = AnimationStatus.increasing;\n\n        if (!particle.opacity.loops) {\n          particle.opacity.loops = 0;\n        }\n\n        particle.opacity.loops++;\n      } else {\n        particle.opacity.value -= ((_e = particle.opacity.velocity) !== null && _e !== void 0 ? _e : 0) * delta.factor;\n      }\n\n      break;\n  }\n\n  checkDestroy(particle, particle.opacity.value, minValue, maxValue);\n\n  if (!particle.destroyed) {\n    particle.opacity.value = clamp(particle.opacity.value, minValue, maxValue);\n  }\n}\n\nexport class OpacityUpdater {\n  constructor(container) {\n    this.container = container;\n  }\n\n  init(particle) {\n    const opacityOptions = particle.options.opacity;\n    particle.opacity = {\n      enable: opacityOptions.animation.enable,\n      max: getRangeMax(opacityOptions.value),\n      min: getRangeMin(opacityOptions.value),\n      value: getRangeValue(opacityOptions.value),\n      loops: 0,\n      maxLoops: opacityOptions.animation.count\n    };\n    const opacityAnimation = opacityOptions.animation;\n\n    if (opacityAnimation.enable) {\n      particle.opacity.status = AnimationStatus.increasing;\n      const opacityRange = opacityOptions.value;\n      particle.opacity.min = getRangeMin(opacityRange);\n      particle.opacity.max = getRangeMax(opacityRange);\n\n      switch (opacityAnimation.startValue) {\n        case StartValueType.min:\n          particle.opacity.value = particle.opacity.min;\n          particle.opacity.status = AnimationStatus.increasing;\n          break;\n\n        case StartValueType.random:\n          particle.opacity.value = randomInRange(particle.opacity);\n          particle.opacity.status = Math.random() >= 0.5 ? AnimationStatus.increasing : AnimationStatus.decreasing;\n          break;\n\n        case StartValueType.max:\n        default:\n          particle.opacity.value = particle.opacity.max;\n          particle.opacity.status = AnimationStatus.decreasing;\n          break;\n      }\n\n      particle.opacity.velocity = opacityAnimation.speed / 100 * this.container.retina.reduceFactor;\n\n      if (!opacityAnimation.sync) {\n        particle.opacity.velocity *= Math.random();\n      }\n    }\n  }\n\n  isEnabled(particle) {\n    var _a, _b, _c;\n\n    return !particle.destroyed && !particle.spawning && !!particle.opacity && particle.opacity.enable && (((_a = particle.opacity.maxLoops) !== null && _a !== void 0 ? _a : 0) <= 0 || ((_b = particle.opacity.loops) !== null && _b !== void 0 ? _b : 0) < ((_c = particle.opacity.maxLoops) !== null && _c !== void 0 ? _c : 0));\n  }\n\n  update(particle, delta) {\n    if (!this.isEnabled(particle)) {\n      return;\n    }\n\n    updateOpacity(particle, delta);\n  }\n\n}","map":{"version":3,"sources":["C:/Users/shiri/OneDrive/Desktop/Shirin Julka/hackathons/ASL/detect/node_modules/tsparticles-updater-opacity/OpacityUpdater.js"],"names":["AnimationStatus","DestroyType","StartValueType","clamp","getRangeMax","getRangeMin","getRangeValue","randomInRange","checkDestroy","particle","value","minValue","maxValue","options","opacity","animation","destroy","max","min","updateOpacity","delta","_a","_b","_c","_d","_e","destroyed","enable","maxLoops","loops","status","increasing","decreasing","velocity","factor","OpacityUpdater","constructor","container","init","opacityOptions","count","opacityAnimation","opacityRange","startValue","random","Math","speed","retina","reduceFactor","sync","isEnabled","spawning","update"],"mappings":"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","sourcesContent":["import { AnimationStatus, DestroyType, StartValueType, clamp, getRangeMax, getRangeMin, getRangeValue, randomInRange, } from \"tsparticles-engine\";\r\nfunction checkDestroy(particle, value, minValue, maxValue) {\r\n    switch (particle.options.opacity.animation.destroy) {\r\n        case DestroyType.max:\r\n            if (value >= maxValue) {\r\n                particle.destroy();\r\n            }\r\n            break;\r\n        case DestroyType.min:\r\n            if (value <= minValue) {\r\n                particle.destroy();\r\n            }\r\n            break;\r\n    }\r\n}\r\nfunction updateOpacity(particle, delta) {\r\n    var _a, _b, _c, _d, _e;\r\n    if (!particle.opacity) {\r\n        return;\r\n    }\r\n    const minValue = particle.opacity.min;\r\n    const maxValue = particle.opacity.max;\r\n    if (!(!particle.destroyed &&\r\n        particle.opacity.enable &&\r\n        (((_a = particle.opacity.maxLoops) !== null && _a !== void 0 ? _a : 0) <= 0 || ((_b = particle.opacity.loops) !== null && _b !== void 0 ? _b : 0) < ((_c = particle.opacity.maxLoops) !== null && _c !== void 0 ? _c : 0)))) {\r\n        return;\r\n    }\r\n    switch (particle.opacity.status) {\r\n        case AnimationStatus.increasing:\r\n            if (particle.opacity.value >= maxValue) {\r\n                particle.opacity.status = AnimationStatus.decreasing;\r\n                if (!particle.opacity.loops) {\r\n                    particle.opacity.loops = 0;\r\n                }\r\n                particle.opacity.loops++;\r\n            }\r\n            else {\r\n                particle.opacity.value += ((_d = particle.opacity.velocity) !== null && _d !== void 0 ? _d : 0) * delta.factor;\r\n            }\r\n            break;\r\n        case AnimationStatus.decreasing:\r\n            if (particle.opacity.value <= minValue) {\r\n                particle.opacity.status = AnimationStatus.increasing;\r\n                if (!particle.opacity.loops) {\r\n                    particle.opacity.loops = 0;\r\n                }\r\n                particle.opacity.loops++;\r\n            }\r\n            else {\r\n                particle.opacity.value -= ((_e = particle.opacity.velocity) !== null && _e !== void 0 ? _e : 0) * delta.factor;\r\n            }\r\n            break;\r\n    }\r\n    checkDestroy(particle, particle.opacity.value, minValue, maxValue);\r\n    if (!particle.destroyed) {\r\n        particle.opacity.value = clamp(particle.opacity.value, minValue, maxValue);\r\n    }\r\n}\r\nexport class OpacityUpdater {\r\n    constructor(container) {\r\n        this.container = container;\r\n    }\r\n    init(particle) {\r\n        const opacityOptions = particle.options.opacity;\r\n        particle.opacity = {\r\n            enable: opacityOptions.animation.enable,\r\n            max: getRangeMax(opacityOptions.value),\r\n            min: getRangeMin(opacityOptions.value),\r\n            value: getRangeValue(opacityOptions.value),\r\n            loops: 0,\r\n            maxLoops: opacityOptions.animation.count,\r\n        };\r\n        const opacityAnimation = opacityOptions.animation;\r\n        if (opacityAnimation.enable) {\r\n            particle.opacity.status = AnimationStatus.increasing;\r\n            const opacityRange = opacityOptions.value;\r\n            particle.opacity.min = getRangeMin(opacityRange);\r\n            particle.opacity.max = getRangeMax(opacityRange);\r\n            switch (opacityAnimation.startValue) {\r\n                case StartValueType.min:\r\n                    particle.opacity.value = particle.opacity.min;\r\n                    particle.opacity.status = AnimationStatus.increasing;\r\n                    break;\r\n                case StartValueType.random:\r\n                    particle.opacity.value = randomInRange(particle.opacity);\r\n                    particle.opacity.status =\r\n                        Math.random() >= 0.5 ? AnimationStatus.increasing : AnimationStatus.decreasing;\r\n                    break;\r\n                case StartValueType.max:\r\n                default:\r\n                    particle.opacity.value = particle.opacity.max;\r\n                    particle.opacity.status = AnimationStatus.decreasing;\r\n                    break;\r\n            }\r\n            particle.opacity.velocity = (opacityAnimation.speed / 100) * this.container.retina.reduceFactor;\r\n            if (!opacityAnimation.sync) {\r\n                particle.opacity.velocity *= Math.random();\r\n            }\r\n        }\r\n    }\r\n    isEnabled(particle) {\r\n        var _a, _b, _c;\r\n        return (!particle.destroyed &&\r\n            !particle.spawning &&\r\n            !!particle.opacity &&\r\n            particle.opacity.enable &&\r\n            (((_a = particle.opacity.maxLoops) !== null && _a !== void 0 ? _a : 0) <= 0 || ((_b = particle.opacity.loops) !== null && _b !== void 0 ? _b : 0) < ((_c = particle.opacity.maxLoops) !== null && _c !== void 0 ? _c : 0)));\r\n    }\r\n    update(particle, delta) {\r\n        if (!this.isEnabled(particle)) {\r\n            return;\r\n        }\r\n        updateOpacity(particle, delta);\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}